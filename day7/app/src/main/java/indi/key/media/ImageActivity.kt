/*
 * Copyright (c) 2019 Chen Mouxiang <cmx_1007@foxmail.com>
 * All Rights Reserved.
 */

package indi.key.media

import android.Manifest
import android.annotation.SuppressLint
import android.graphics.drawable.Drawable
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.View
import android.widget.ImageView
import android.widget.Toast
import com.bumptech.glide.Glide
import com.bumptech.glide.RequestBuilder
import com.bumptech.glide.RequestManager
import com.bumptech.glide.load.engine.DiskCacheStrategy
import com.bumptech.glide.request.RequestOptions
import kotlinx.android.synthetic.main.activity_image.*
import permissions.dispatcher.NeedsPermission
import permissions.dispatcher.OnPermissionDenied
import permissions.dispatcher.RuntimePermissions
import java.util.ArrayList
import android.provider.MediaStore
import android.view.Window
import android.view.WindowManager
import androidx.annotation.RequiresApi

@RuntimePermissions
class ImageActivity : AppCompatActivity() {

    private var pages: MutableList<View> = ArrayList()
    private val adapter = ViewAdapter().apply {
        setData(pages)
    }

    private val localSources: Array<GlideSource> = arrayOf(
        ResGlideSource(R.drawable.drawableimage),
        ResGlideSource(R.drawable.ic_markunread),
        PathGlideSource("file:///android_asset/assetsimage.jpg"),
        PathGlideSource("https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1562328963756&di=9c0c6c839381c8314a3ce8e7db61deb2&imgtype=0&src=http%3A%2F%2Fpic13.nipic.com%2F20110316%2F5961966_124313527122_2.jpg")
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val window = window
        requestWindowFeature(Window.FEATURE_NO_TITLE)
        val flag = WindowManager.LayoutParams.FLAG_FULLSCREEN
        window.setFlags(flag, flag)

        setContentView(R.layout.activity_image)

        viewPager.adapter = adapter

        fillSDCardImgsWithPermissionCheck() // generated by PermissionDispatcher
    }

    @NeedsPermission(Manifest.permission.READ_EXTERNAL_STORAGE)
    fun fillSDCardImgs() {
        Toast.makeText(this, "Permission granted. Load SD card images", Toast.LENGTH_SHORT)
            .show()

        val imageUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI
        contentResolver.query(
            imageUri, null,
            MediaStore.Images.Media.MIME_TYPE + "=? or "
                    + MediaStore.Images.Media.MIME_TYPE + "=?",
            arrayOf("image/jpeg", "image/png"), MediaStore.Images.Media.DATE_MODIFIED
        )
            ?.run {
                var i = 0
                while (moveToNext() && i < 5) {
                    val path = getString(getColumnIndex(MediaStore.Images.Media.DATA))
                    pages.add(inflateImageView(PathGlideSource(path)))
                    i++
                }
                close()
            }
        adapter.setData(pages)

        fillLocalImgs()
    }

    @OnPermissionDenied(Manifest.permission.READ_EXTERNAL_STORAGE)
    fun fillLocalImgs() {
        Toast.makeText(this, "Permission denied. Load local images", Toast.LENGTH_SHORT)
            .show()
        for (source in localSources) {
            pages.add(inflateImageView(source))
        }
        adapter.setData(pages)
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        onRequestPermissionsResult(requestCode, grantResults) // method generated by PermissionDispatcher
    }

    @SuppressLint("InflateParams")
    private fun inflateImageView(source: GlideSource): ImageView {
        return (layoutInflater.inflate(R.layout.photo_view, null) as ImageView).also {
            Glide.with(this)
                .loadSource(source)
                .apply(
                    RequestOptions()
                        //.circleCrop()
                        .diskCacheStrategy(DiskCacheStrategy.ALL)
                )
                .error(R.drawable.error)
                .into(it)
        }
    }

    interface GlideSource {
        fun onLoad(requestManager: RequestManager): RequestBuilder<Drawable>
    }

    class PathGlideSource(private val path: String) : GlideSource {
        override fun onLoad(requestManager: RequestManager): RequestBuilder<Drawable> {
            return requestManager.load(path)
        }
    }

    class ResGlideSource(private val resId: Int) : GlideSource {
        override fun onLoad(requestManager: RequestManager): RequestBuilder<Drawable> {
            return requestManager.load(resId)
        }
    }

    private fun RequestManager.loadSource(glideSource: GlideSource): RequestBuilder<Drawable> {
        return glideSource.onLoad(this)
    }
}
